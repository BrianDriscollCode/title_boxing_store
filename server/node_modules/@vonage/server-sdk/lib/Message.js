"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Utils = _interopRequireDefault(require("./Utils"));

var _ShortCode = _interopRequireDefault(require("./ShortCode"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var querystring = require("querystring");

class Message {
  static get ERROR_MESSAGES() {
    return {
      sender: "Invalid from address",
      to: "Invalid to address",
      msg: "Invalid Text Message",
      body: "Invalid Body value in Binary Message",
      udh: "Invalid udh value in Binary Message",
      title: "Invalid title in WAP Push message",
      url: "Invalid url in WAP Push message"
    };
  }

  static get PATH() {
    return "/sms/json";
  }
  /**
   * @param {Credentials} credentials
   *    credentials to be used when interacting with the API.
   * @param {Object} options
   *    Addition SMS options.
   */


  constructor(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.creds = credentials;
    this.options = options;

    var _shortcode = new _ShortCode.default(this.creds, this.options);

    this.shortcodeAlert = _shortcode.shortcodeAlert.bind(_shortcode);
    this.shortcode2FA = _shortcode.shortcode2FA.bind(_shortcode);
    this.shortcodeMarketing = _shortcode.shortcodeMarketing.bind(_shortcode);
  }

  _checkToAndFrom(data, callback) {
    if (!data.from) {
      _Utils.default.sendError(callback, new Error(Message.ERROR_MESSAGES.sender));
    } else if (!data.to) {
      _Utils.default.sendError(callback, new Error(Message.ERROR_MESSAGES.to));
    } else {
      return;
    }
  } // _sendMessageCallback


  _sendMessage(data, callback) {
    this._checkToAndFrom(data, callback);

    this.options.logger.info("sending message from " + data.from + " to " + data.to + " with message " + data.text);
    var creds = {
      api_key: this.creds.apiKey,
      api_secret: this.creds.apiSecret
    };
    var body = Object.assign({}, creds, data);
    this.options.httpClient.request({
      host: this.options.restHost || "rest.nexmo.com",
      path: Message.PATH,
      body: JSON.stringify(body),
      headers: {
        "Content-Type": "application/json"
      }
    }, "POST", (err, apiResponse) => {
      if (!err && apiResponse.status && apiResponse.messages[0].status > 0) {
        _Utils.default.sendError(callback, new Error(apiResponse.messages[0]["error-text"]), apiResponse);
      } else {
        if (callback) callback(err, apiResponse);
      }
    });
  }
  /**
   * TODO: document
   */


  sendSms(sender, recipient, message, opts, callback) {
    if (!message) {
      _Utils.default.sendError(callback, new Error(Message.ERROR_MESSAGES.msg));
    } else {
      if (!callback) {
        callback = opts;
        opts = {};
      }

      opts["from"] = sender;
      opts["to"] = recipient;
      opts["text"] = message;

      this._sendMessage(opts, callback);
    }
  }
  /**
   * TODO: document
   */


  sendBinaryMessage(sender, recipient, body, udh, opts, callback) {
    if (!body) {
      _Utils.default.sendError(callback, new Error(Message.ERROR_MESSAGES.body));
    } else if (!udh) {
      _Utils.default.sendError(callback, new Error(Message.ERROR_MESSAGES.udh));
    } else {
      if (!callback) {
        callback = opts;
        opts = {};
      }

      opts["from"] = sender;
      opts["to"] = recipient;
      opts["type"] = "binary";
      opts["body"] = body;
      opts["udh"] = udh;

      this._sendMessage(opts, callback);
    }
  }
  /**
   * TODO: document
   */


  sendWapPushMessage(sender, recipient, title, url, validity, opts, callback) {
    if (!title) {
      _Utils.default.sendError(callback, new Error(Message.ERROR_MESSAGES.title));
    } else if (!url) {
      _Utils.default.sendError(callback, new Error(Message.ERROR_MESSAGES.url));
    } else {
      if (typeof validity === "function") {
        callback = validity;
        opts = {};
        validity = 86400000;
      }

      if (typeof opts === "function") {
        callback = opts;
        opts = {};
      }

      opts["from"] = sender;
      opts["to"] = recipient;
      opts["type"] = "wappush";
      opts["title"] = title;
      opts["validity"] = validity;
      opts["url"] = url;

      this._sendMessage(opts, callback);
    }
  }

  search(id, callback) {
    if (typeof id == "string") {
      return this.options.rest.get("/search/message", {
        id: id
      }, callback);
    } // Otherwise we expect an array


    return this.options.rest.get("/search/messages", {
      ids: id
    }, callback);
  }

  searchRejections(to, date, callback) {
    return this.options.rest.get("/search/rejections", {
      to,
      date
    }, callback);
  }

}

var _default = Message;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,