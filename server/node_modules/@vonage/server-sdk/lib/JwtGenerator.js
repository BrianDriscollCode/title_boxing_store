"use strict";

var _uuid = require("uuid");

var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class JwtGenerator {
  /**
   * Generate a JSON Web Token (JWT).
   *
   * @param {Buffer} cert - the private key certificate to be used when signing
   * the claims.
   * @param {Object} claims - additional claims to include within the generated
   * JWT.
   *
   * @returns {String} the generated token
   */
  generate(cert) {
    var claims = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (!(cert instanceof Buffer)) {
      throw new Error("cert must be of type Buffer");
    }

    if (typeof claims !== "object") {
      throw new Error("claims must be of type object");
    }

    var toSign = {
      iat: claims.issuedAt || parseInt(Date.now() / 1000, 10),
      jti: claims.jti || (0, _uuid.v1)()
    };
    Object.keys(claims).forEach(key => {
      toSign[key] = claims[key];
    });

    var token = _jsonwebtoken.default.sign(toSign, cert, {
      algorithm: "RS256"
    });

    return token;
  }

}

module.exports = JwtGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJKd3RHZW5lcmF0b3IiLCJnZW5lcmF0ZSIsImNlcnQiLCJjbGFpbXMiLCJCdWZmZXIiLCJFcnJvciIsInRvU2lnbiIsImlhdCIsImlzc3VlZEF0IiwicGFyc2VJbnQiLCJEYXRlIiwibm93IiwianRpIiwidXVpZHYxIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJ0b2tlbiIsImp3dCIsInNpZ24iLCJhbGdvcml0aG0iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vc3JjL0p3dEdlbmVyYXRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB2MSBhcyB1dWlkdjEgfSBmcm9tIFwidXVpZFwiO1xuaW1wb3J0IGp3dCBmcm9tIFwianNvbndlYnRva2VuXCI7XG5cbmNsYXNzIEp3dEdlbmVyYXRvciB7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIEpTT04gV2ViIFRva2VuIChKV1QpLlxuICAgKlxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gY2VydCAtIHRoZSBwcml2YXRlIGtleSBjZXJ0aWZpY2F0ZSB0byBiZSB1c2VkIHdoZW4gc2lnbmluZ1xuICAgKiB0aGUgY2xhaW1zLlxuICAgKiBAcGFyYW0ge09iamVjdH0gY2xhaW1zIC0gYWRkaXRpb25hbCBjbGFpbXMgdG8gaW5jbHVkZSB3aXRoaW4gdGhlIGdlbmVyYXRlZFxuICAgKiBKV1QuXG4gICAqXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBnZW5lcmF0ZWQgdG9rZW5cbiAgICovXG4gIGdlbmVyYXRlKGNlcnQsIGNsYWltcyA9IHt9KSB7XG4gICAgaWYgKCEoY2VydCBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImNlcnQgbXVzdCBiZSBvZiB0eXBlIEJ1ZmZlclwiKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjbGFpbXMgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImNsYWltcyBtdXN0IGJlIG9mIHR5cGUgb2JqZWN0XCIpO1xuICAgIH1cblxuICAgIHZhciB0b1NpZ24gPSB7XG4gICAgICBpYXQ6IGNsYWltcy5pc3N1ZWRBdCB8fCBwYXJzZUludChEYXRlLm5vdygpIC8gMTAwMCwgMTApLFxuICAgICAganRpOiBjbGFpbXMuanRpIHx8IHV1aWR2MSgpLFxuICAgIH07XG4gICAgT2JqZWN0LmtleXMoY2xhaW1zKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIHRvU2lnbltrZXldID0gY2xhaW1zW2tleV07XG4gICAgfSk7XG5cbiAgICB2YXIgdG9rZW4gPSBqd3Quc2lnbih0b1NpZ24sIGNlcnQsIHsgYWxnb3JpdGhtOiBcIlJTMjU2XCIgfSk7XG4gICAgcmV0dXJuIHRva2VuO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSnd0R2VuZXJhdG9yO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOzs7O0FBRUEsTUFBTUEsWUFBTixDQUFtQjtFQUNqQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxRQUFRLENBQUNDLElBQUQsRUFBb0I7SUFBQSxJQUFiQyxNQUFhLHVFQUFKLEVBQUk7O0lBQzFCLElBQUksRUFBRUQsSUFBSSxZQUFZRSxNQUFsQixDQUFKLEVBQStCO01BQzdCLE1BQU0sSUFBSUMsS0FBSixDQUFVLDZCQUFWLENBQU47SUFDRDs7SUFDRCxJQUFJLE9BQU9GLE1BQVAsS0FBa0IsUUFBdEIsRUFBZ0M7TUFDOUIsTUFBTSxJQUFJRSxLQUFKLENBQVUsK0JBQVYsQ0FBTjtJQUNEOztJQUVELElBQUlDLE1BQU0sR0FBRztNQUNYQyxHQUFHLEVBQUVKLE1BQU0sQ0FBQ0ssUUFBUCxJQUFtQkMsUUFBUSxDQUFDQyxJQUFJLENBQUNDLEdBQUwsS0FBYSxJQUFkLEVBQW9CLEVBQXBCLENBRHJCO01BRVhDLEdBQUcsRUFBRVQsTUFBTSxDQUFDUyxHQUFQLElBQWMsSUFBQUMsUUFBQTtJQUZSLENBQWI7SUFJQUMsTUFBTSxDQUFDQyxJQUFQLENBQVlaLE1BQVosRUFBb0JhLE9BQXBCLENBQTZCQyxHQUFELElBQVM7TUFDbkNYLE1BQU0sQ0FBQ1csR0FBRCxDQUFOLEdBQWNkLE1BQU0sQ0FBQ2MsR0FBRCxDQUFwQjtJQUNELENBRkQ7O0lBSUEsSUFBSUMsS0FBSyxHQUFHQyxxQkFBQSxDQUFJQyxJQUFKLENBQVNkLE1BQVQsRUFBaUJKLElBQWpCLEVBQXVCO01BQUVtQixTQUFTLEVBQUU7SUFBYixDQUF2QixDQUFaOztJQUNBLE9BQU9ILEtBQVA7RUFDRDs7QUE3QmdCOztBQWdDbkJJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnZCLFlBQWpCIn0=