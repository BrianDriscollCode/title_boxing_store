"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Utils = _interopRequireDefault(require("./Utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class App {
  /**
   * Provides access to the `applications` version 2 endpoint.
   */
  static get PATH() {
    return "/v2/applications";
  }
  /**
   * @param {Credentials} credentials
   *    credentials to be used when interacting with the API.
   * @param {Object} options
   *    Addition App options.
   */


  constructor(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.creds = credentials;
    this.options = options;
  }

  _convertMethodSignature(name, type, answerUrl, eventUrl, options) {
    var capability = {};

    switch (type) {
      case "voice":
        capability = {
          voice: {
            webhooks: {
              answer_url: {
                address: answerUrl,
                http_method: "GET"
              },
              event_url: {
                address: eventUrl,
                http_method: "POST"
              }
            }
          }
        };
        break;

      case "messages":
        capability = {
          messages: {
            webhooks: {
              inbound_url: {
                address: options.inbound_url,
                http_method: "POST"
              },
              status_url: {
                address: options.status_url,
                http_method: "POST"
              }
            }
          }
        };
        break;

      case "rtc":
        capability = {
          rtc: {
            webhooks: {
              event_url: {
                address: eventUrl,
                http_method: "POST"
              }
            }
          }
        };
        break;
    }

    return {
      name: name,
      capabilities: capability
    };
  }

  _convertApplicationResponse(application) {
    for (var capability in application.capabilities) {
      application[capability] = {
        webhooks: []
      };

      for (var webhook in application.capabilities[capability].webhooks) {
        application[capability].webhooks.push({
          endpoint_type: webhook,
          endpoint: application.capabilities[capability].webhooks[webhook].address,
          http_method: application.capabilities[capability].webhooks[webhook].http_method
        });
      }
    }

    delete application.capabilities;
    return application;
  }

  _convertApplicationListResponse(applicationResponseHandler) {
    return response => {
      response.count = response.total_items;
      response.page_index = response.page;

      for (var i in response._embedded.applications) {
        response._embedded.applications[i] = applicationResponseHandler(response._embedded.applications[i]);
      }

      return response;
    };
  }
  /**
   * TODO: document
   */


  create(name, type, answerUrl, eventUrl, options, callback) {
    var params = {};
    var responseParser = null;

    if (arguments.length > 2) {
      params = JSON.stringify(this._convertMethodSignature(name, type, answerUrl, eventUrl, options));
      responseParser = this._convertApplicationResponse;
    } else {
      params = JSON.stringify(name);
      callback = type;
    }

    var authorization = "".concat(this.creds.apiKey, ":").concat(this.creds.apiSecret);
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: App.PATH,
      method: "POST",
      body: params,
      headers: {
        "Content-Type": "application/json",
        Authorization: "Basic ".concat(Buffer.from(authorization).toString("base64"))
      }
    };
    this.options.httpClient.request(config, callback, callback, false, responseParser);
  }
  /**
   * TODO: document
   */


  get(params, callback) {
    var v2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var authorization = "".concat(this.creds.apiKey, ":").concat(this.creds.apiSecret);
    var responseParser = null;

    if (typeof params !== "object") {
      responseParser = this._convertApplicationResponse;
    } else {
      responseParser = this._convertApplicationListResponse(this._convertApplicationResponse);
    }

    if (v2) {
      responseParser = null;
    }

    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: _Utils.default.createPathWithQuery(App.PATH, params),
      method: "GET",
      body: undefined,
      headers: {
        "Content-Type": "application/json",
        Authorization: "Basic ".concat(Buffer.from(authorization).toString("base64"))
      }
    };
    this.options.httpClient.request(config, callback, callback, false, responseParser);
  }
  /**
   * TODO: document
   */


  update(appId, name, type, answerUrl, eventUrl, options, callback) {
    var params = {};
    var responseParser = null;

    if (arguments.length > 3) {
      params = JSON.stringify(this._convertMethodSignature(name, type, answerUrl, eventUrl, options));
      responseParser = this._convertApplicationResponse;
    } else {
      params = JSON.stringify(name);
      callback = type;
    }

    var authorization = "".concat(this.creds.apiKey, ":").concat(this.creds.apiSecret);
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: "".concat(App.PATH, "/").concat(appId),
      method: "PUT",
      body: params,
      headers: {
        "Content-Type": "application/json",
        Authorization: "Basic ".concat(Buffer.from(authorization).toString("base64"))
      }
    };
    this.options.httpClient.request(config, callback, callback, false, responseParser);
  }
  /**
   * TODO: document
   */


  delete(appId, callback) {
    var authorization = "".concat(this.creds.apiKey, ":").concat(this.creds.apiSecret);
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: "".concat(App.PATH, "/").concat(appId),
      method: "DELETE",
      body: "{}",
      headers: {
        "Content-Type": "application/json",
        Authorization: "Basic ".concat(Buffer.from(authorization).toString("base64"))
      }
    };
    this.options.httpClient.request(config, callback);
  }

}

var _default = App;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,