"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * Provides access to the `dtmf` resource.
 */
class DtmfResource {
  /**
   * The path to the `dtmf` resource.
   */
  static get PATH() {
    return "/v1/calls/{call_uuid}/dtmf";
  }
  /**
   * Creates a new DtmfResource.
   *
   * @param {Credentials} creds - Credentials used when interacting with the Vonage API.
   * @param {Object} options - additional options for the class.
   */


  constructor(creds, options) {
    this.creds = creds;
    this.options = options;
  }
  /**
   * Sends DTMF to a call.
   *
   * @param {Object} params - Parameters used when sending the dtmf to the call. See https://developer.nexmo.com/api/voice#dtmf for more information.
   * @param {function} callback - function to be called when the request completes.
   */


  send(callId, params, callback) {
    params = JSON.stringify(params);
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: DtmfResource.PATH.replace("{call_uuid}", callId),
      method: "PUT",
      body: params,
      headers: {
        "Content-Type": "application/json",
        "Content-Length": Buffer.byteLength(params),
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }

}

var _default = DtmfResource;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEdG1mUmVzb3VyY2UiLCJQQVRIIiwiY29uc3RydWN0b3IiLCJjcmVkcyIsIm9wdGlvbnMiLCJzZW5kIiwiY2FsbElkIiwicGFyYW1zIiwiY2FsbGJhY2siLCJKU09OIiwic3RyaW5naWZ5IiwiY29uZmlnIiwiaG9zdCIsImFwaUhvc3QiLCJwYXRoIiwicmVwbGFjZSIsIm1ldGhvZCIsImJvZHkiLCJoZWFkZXJzIiwiQnVmZmVyIiwiYnl0ZUxlbmd0aCIsIkF1dGhvcml6YXRpb24iLCJnZW5lcmF0ZUp3dCIsImh0dHBDbGllbnQiLCJyZXF1ZXN0Il0sInNvdXJjZXMiOlsiLi4vc3JjL0R0bWZSZXNvdXJjZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFByb3ZpZGVzIGFjY2VzcyB0byB0aGUgYGR0bWZgIHJlc291cmNlLlxuICovXG5jbGFzcyBEdG1mUmVzb3VyY2Uge1xuICAvKipcbiAgICogVGhlIHBhdGggdG8gdGhlIGBkdG1mYCByZXNvdXJjZS5cbiAgICovXG4gIHN0YXRpYyBnZXQgUEFUSCgpIHtcbiAgICByZXR1cm4gXCIvdjEvY2FsbHMve2NhbGxfdXVpZH0vZHRtZlwiO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgRHRtZlJlc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0NyZWRlbnRpYWxzfSBjcmVkcyAtIENyZWRlbnRpYWxzIHVzZWQgd2hlbiBpbnRlcmFjdGluZyB3aXRoIHRoZSBWb25hZ2UgQVBJLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGFkZGl0aW9uYWwgb3B0aW9ucyBmb3IgdGhlIGNsYXNzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoY3JlZHMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmNyZWRzID0gY3JlZHM7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBEVE1GIHRvIGEgY2FsbC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAtIFBhcmFtZXRlcnMgdXNlZCB3aGVuIHNlbmRpbmcgdGhlIGR0bWYgdG8gdGhlIGNhbGwuIFNlZSBodHRwczovL2RldmVsb3Blci5uZXhtby5jb20vYXBpL3ZvaWNlI2R0bWYgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHJlcXVlc3QgY29tcGxldGVzLlxuICAgKi9cbiAgc2VuZChjYWxsSWQsIHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICBwYXJhbXMgPSBKU09OLnN0cmluZ2lmeShwYXJhbXMpO1xuXG4gICAgdmFyIGNvbmZpZyA9IHtcbiAgICAgIGhvc3Q6IHRoaXMub3B0aW9ucy5hcGlIb3N0IHx8IFwiYXBpLm5leG1vLmNvbVwiLFxuICAgICAgcGF0aDogRHRtZlJlc291cmNlLlBBVEgucmVwbGFjZShcIntjYWxsX3V1aWR9XCIsIGNhbGxJZCksXG4gICAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgICBib2R5OiBwYXJhbXMsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICBcIkNvbnRlbnQtTGVuZ3RoXCI6IEJ1ZmZlci5ieXRlTGVuZ3RoKHBhcmFtcyksXG4gICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLmNyZWRzLmdlbmVyYXRlSnd0KCl9YCxcbiAgICAgIH0sXG4gICAgfTtcbiAgICB0aGlzLm9wdGlvbnMuaHR0cENsaWVudC5yZXF1ZXN0KGNvbmZpZywgY2FsbGJhY2spO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IER0bWZSZXNvdXJjZTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBLE1BQU1BLFlBQU4sQ0FBbUI7RUFDakI7QUFDRjtBQUNBO0VBQ2lCLFdBQUpDLElBQUksR0FBRztJQUNoQixPQUFPLDRCQUFQO0VBQ0Q7RUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztFQUNFQyxXQUFXLENBQUNDLEtBQUQsRUFBUUMsT0FBUixFQUFpQjtJQUMxQixLQUFLRCxLQUFMLEdBQWFBLEtBQWI7SUFDQSxLQUFLQyxPQUFMLEdBQWVBLE9BQWY7RUFDRDtFQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0VBQ0VDLElBQUksQ0FBQ0MsTUFBRCxFQUFTQyxNQUFULEVBQWlCQyxRQUFqQixFQUEyQjtJQUM3QkQsTUFBTSxHQUFHRSxJQUFJLENBQUNDLFNBQUwsQ0FBZUgsTUFBZixDQUFUO0lBRUEsSUFBSUksTUFBTSxHQUFHO01BQ1hDLElBQUksRUFBRSxLQUFLUixPQUFMLENBQWFTLE9BQWIsSUFBd0IsZUFEbkI7TUFFWEMsSUFBSSxFQUFFZCxZQUFZLENBQUNDLElBQWIsQ0FBa0JjLE9BQWxCLENBQTBCLGFBQTFCLEVBQXlDVCxNQUF6QyxDQUZLO01BR1hVLE1BQU0sRUFBRSxLQUhHO01BSVhDLElBQUksRUFBRVYsTUFKSztNQUtYVyxPQUFPLEVBQUU7UUFDUCxnQkFBZ0Isa0JBRFQ7UUFFUCxrQkFBa0JDLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQmIsTUFBbEIsQ0FGWDtRQUdQYyxhQUFhLG1CQUFZLEtBQUtsQixLQUFMLENBQVdtQixXQUFYLEVBQVo7TUFITjtJQUxFLENBQWI7SUFXQSxLQUFLbEIsT0FBTCxDQUFhbUIsVUFBYixDQUF3QkMsT0FBeEIsQ0FBZ0NiLE1BQWhDLEVBQXdDSCxRQUF4QztFQUNEOztBQXhDZ0I7O2VBMkNKUixZIn0=