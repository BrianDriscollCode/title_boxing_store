"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _index = _interopRequireDefault(require("./index"));

var _Utils = _interopRequireDefault(require("./Utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Provides access to the `users` endpoint.
 */
class Users {
  static get PATH() {
    return "/beta/users";
  }

  static get BETA2_PATH() {
    return "/beta2/users";
  }
  /**
   * @param {Credentials} credentials
   *    credentials to be used when interacting with the API.
   * @param {Object} options
   *    Additional Users options.
   */


  constructor(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.creds = credentials;
    this.options = options;
  }
  /**
   * Create a new user.
   *
   * @param {Object} params - Parameters used when creating the user. See https://ea.developer.nexmo.com/api/conversation#create-a-user for more information.
   * @param {function} callback - function to be called when the request completes.
   */


  create(params, callback) {
    params = JSON.stringify(params);
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: Users.PATH,
      method: "POST",
      body: params,
      headers: {
        "Content-Type": "application/json",
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }
  /**
   * Get an existing user.
   *
   * @param {string|object} query - The unique identifier for the user to retrieve
   *               or a set of filter parameters for the query. For more information
   *               see https://ea.developer.nexmo.com/api/conversation#retrieve-all-users
   * @param {function} callback - function to be called when the request completes.
   */


  get(query, callback) {
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: _Utils.default.createPathWithQuery(Users.BETA2_PATH, query),
      method: "GET",
      body: undefined,
      headers: {
        "Content-Type": "application/json",
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }
  /**
   * Get next page of users or conversations for a user.
   *
   * @param {object} response - The response from a paginated users or conversations list
   *               see https://ea.developer.nexmo.com/api/conversation#retrieve-all-users
   * @param {function} callback - function to be called when the request completes.
   */


  next(response, callback) {
    if (response._links.next) {
      var userId = response._links.next.href.match(/USR-[^/]*/g);

      if (userId) {
        this.getConversations(userId[0], _Utils.default.getQuery(response._links.next.href), callback);
      } else {
        this.get(_Utils.default.getQuery(response._links.next.href), callback);
      }
    } else {
      var error = new Error("The response doesn't have a next page.");
      callback(error, null);
    }
  }
  /**
   * Get previous page of users or conversations for a user.
   *
   * @param {object} response - The response from a paginated users or conversations list
   *               see https://ea.developer.nexmo.com/api/conversation#retrieve-all-users
   * @param {function} callback - function to be called when the request completes.
   */


  prev(response, callback) {
    if (response._links.prev) {
      var userId = response._links.prev.href.match(/USR-[^/]*/g);

      if (userId) {
        this.getConversations(userId[0], _Utils.default.getQuery(response._links.prev.href), callback);
      } else {
        this.get(_Utils.default.getQuery(response._links.prev.href), callback);
      }
    } else {
      var error = new Error("The response doesn't have a previous page.");
      callback(error, null);
    }
  }
  /**
   * Get an conversations for an existing user.
   *
   * @param {string} userId - The unique identifier for the user to retrieve conversations for
   * @param {function} callback - function to be called when the request completes.
   */


  getConversations(userId, query, callback) {
    // backwards compatibility to 2.5.4-beta-1. Remove for 3.0.0
    if (typeof query === "function") {
      callback = query;
      query = {};
    }

    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: _Utils.default.createPathWithQuery("".concat(Users.BETA2_PATH, "/").concat(userId, "/conversations"), query),
      method: "GET",
      body: undefined,
      headers: {
        "Content-Type": "application/json",
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }
  /**
   * Update an existing user.
   *
   * @param {string} userId - The unique identifier for the user to update.
   * @param {Object} params - Parameters used when updating the conversation.
   * @param {function} callback - function to be called when the request completes.
   */


  update(userId, params, callback) {
    params = JSON.stringify(params);
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: "".concat(Users.PATH, "/").concat(userId),
      method: "PUT",
      body: params,
      headers: {
        "Content-Type": "application/json",
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }
  /**
   * Deleta an existing user.
   *
   * @param {string} userId - The unique identifier for the user to delete.
   * @param {function} callback - function to be called when the request completes.
   */


  delete(userId, callback) {
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: "".concat(Users.PATH, "/").concat(userId),
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }

}

var _default = Users;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,