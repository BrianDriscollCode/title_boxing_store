"use strict";

var crypto = require("crypto");

class HashGenerator {
  /**
   * Generate a Signature Hash.
   *
   * @param {String} method - the method to be used when creating the hash
   * @param {String} secret - the secret to be used when creating the hash
   * @param {Object} params - params to generate hash from
   *
   * @returns {String} the generated token
   */
  generate(method, secret, params) {
    params = params || {};
    var signedQuery = "";
    params = JSON.parse(JSON.stringify(params));

    if (params.sig) {
      delete params.sig;
    }

    Object.keys(params).sort().forEach(key => {
      // replace & and = with _
      signedQuery += "&" + key + "=" + params[key].replace(/\&|\=/g, "_");
    });
    var hash = "";

    switch (method) {
      case "md5hash":
        signedQuery += secret;
        hash = crypto.createHash("md5").update(signedQuery).digest("hex");
        break;

      case "md5":
      case "sha1":
      case "sha256":
      case "sha512":
        hash = crypto.createHmac(method, secret).update(signedQuery).digest("hex");
        break;

      default:
        throw "Unknown signature algorithm: ".concat(method, ". Expected: md5hash, md5, sha1, sha256, or sha512");
    }

    return hash;
  }

}

module.exports = HashGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcnlwdG8iLCJyZXF1aXJlIiwiSGFzaEdlbmVyYXRvciIsImdlbmVyYXRlIiwibWV0aG9kIiwic2VjcmV0IiwicGFyYW1zIiwic2lnbmVkUXVlcnkiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJzaWciLCJPYmplY3QiLCJrZXlzIiwic29ydCIsImZvckVhY2giLCJrZXkiLCJyZXBsYWNlIiwiaGFzaCIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJkaWdlc3QiLCJjcmVhdGVIbWFjIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uL3NyYy9IYXNoR2VuZXJhdG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNyeXB0byA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5cbmNsYXNzIEhhc2hHZW5lcmF0b3Ige1xuICAvKipcbiAgICogR2VuZXJhdGUgYSBTaWduYXR1cmUgSGFzaC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCAtIHRoZSBtZXRob2QgdG8gYmUgdXNlZCB3aGVuIGNyZWF0aW5nIHRoZSBoYXNoXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzZWNyZXQgLSB0aGUgc2VjcmV0IHRvIGJlIHVzZWQgd2hlbiBjcmVhdGluZyB0aGUgaGFzaFxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gcGFyYW1zIHRvIGdlbmVyYXRlIGhhc2ggZnJvbVxuICAgKlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZ2VuZXJhdGVkIHRva2VuXG4gICAqL1xuICBnZW5lcmF0ZShtZXRob2QsIHNlY3JldCwgcGFyYW1zKSB7XG4gICAgcGFyYW1zID0gcGFyYW1zIHx8IHt9O1xuICAgIHZhciBzaWduZWRRdWVyeSA9IFwiXCI7XG5cbiAgICBwYXJhbXMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHBhcmFtcykpO1xuXG4gICAgaWYgKHBhcmFtcy5zaWcpIHtcbiAgICAgIGRlbGV0ZSBwYXJhbXMuc2lnO1xuICAgIH1cblxuICAgIE9iamVjdC5rZXlzKHBhcmFtcylcbiAgICAgIC5zb3J0KClcbiAgICAgIC5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgLy8gcmVwbGFjZSAmIGFuZCA9IHdpdGggX1xuICAgICAgICBzaWduZWRRdWVyeSArPSBcIiZcIiArIGtleSArIFwiPVwiICsgcGFyYW1zW2tleV0ucmVwbGFjZSgvXFwmfFxcPS9nLCBcIl9cIik7XG4gICAgICB9KTtcblxuICAgIHZhciBoYXNoID0gXCJcIjtcblxuICAgIHN3aXRjaCAobWV0aG9kKSB7XG4gICAgICBjYXNlIFwibWQ1aGFzaFwiOlxuICAgICAgICBzaWduZWRRdWVyeSArPSBzZWNyZXQ7XG4gICAgICAgIGhhc2ggPSBjcnlwdG8uY3JlYXRlSGFzaChcIm1kNVwiKS51cGRhdGUoc2lnbmVkUXVlcnkpLmRpZ2VzdChcImhleFwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwibWQ1XCI6XG4gICAgICBjYXNlIFwic2hhMVwiOlxuICAgICAgY2FzZSBcInNoYTI1NlwiOlxuICAgICAgY2FzZSBcInNoYTUxMlwiOlxuICAgICAgICBoYXNoID0gY3J5cHRvXG4gICAgICAgICAgLmNyZWF0ZUhtYWMobWV0aG9kLCBzZWNyZXQpXG4gICAgICAgICAgLnVwZGF0ZShzaWduZWRRdWVyeSlcbiAgICAgICAgICAuZGlnZXN0KFwiaGV4XCIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgYFVua25vd24gc2lnbmF0dXJlIGFsZ29yaXRobTogJHttZXRob2R9LiBFeHBlY3RlZDogbWQ1aGFzaCwgbWQ1LCBzaGExLCBzaGEyNTYsIG9yIHNoYTUxMmA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhhc2g7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoR2VuZXJhdG9yO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQU1BLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBdEI7O0FBRUEsTUFBTUMsYUFBTixDQUFvQjtFQUNsQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsUUFBUSxDQUFDQyxNQUFELEVBQVNDLE1BQVQsRUFBaUJDLE1BQWpCLEVBQXlCO0lBQy9CQSxNQUFNLEdBQUdBLE1BQU0sSUFBSSxFQUFuQjtJQUNBLElBQUlDLFdBQVcsR0FBRyxFQUFsQjtJQUVBRCxNQUFNLEdBQUdFLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLFNBQUwsQ0FBZUosTUFBZixDQUFYLENBQVQ7O0lBRUEsSUFBSUEsTUFBTSxDQUFDSyxHQUFYLEVBQWdCO01BQ2QsT0FBT0wsTUFBTSxDQUFDSyxHQUFkO0lBQ0Q7O0lBRURDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZUCxNQUFaLEVBQ0dRLElBREgsR0FFR0MsT0FGSCxDQUVZQyxHQUFELElBQVM7TUFDaEI7TUFDQVQsV0FBVyxJQUFJLE1BQU1TLEdBQU4sR0FBWSxHQUFaLEdBQWtCVixNQUFNLENBQUNVLEdBQUQsQ0FBTixDQUFZQyxPQUFaLENBQW9CLFFBQXBCLEVBQThCLEdBQTlCLENBQWpDO0lBQ0QsQ0FMSDtJQU9BLElBQUlDLElBQUksR0FBRyxFQUFYOztJQUVBLFFBQVFkLE1BQVI7TUFDRSxLQUFLLFNBQUw7UUFDRUcsV0FBVyxJQUFJRixNQUFmO1FBQ0FhLElBQUksR0FBR2xCLE1BQU0sQ0FBQ21CLFVBQVAsQ0FBa0IsS0FBbEIsRUFBeUJDLE1BQXpCLENBQWdDYixXQUFoQyxFQUE2Q2MsTUFBN0MsQ0FBb0QsS0FBcEQsQ0FBUDtRQUNBOztNQUNGLEtBQUssS0FBTDtNQUNBLEtBQUssTUFBTDtNQUNBLEtBQUssUUFBTDtNQUNBLEtBQUssUUFBTDtRQUNFSCxJQUFJLEdBQUdsQixNQUFNLENBQ1ZzQixVQURJLENBQ09sQixNQURQLEVBQ2VDLE1BRGYsRUFFSmUsTUFGSSxDQUVHYixXQUZILEVBR0pjLE1BSEksQ0FHRyxLQUhILENBQVA7UUFJQTs7TUFFRjtRQUNFLDZDQUFzQ2pCLE1BQXRDO0lBaEJKOztJQW1CQSxPQUFPYyxJQUFQO0VBQ0Q7O0FBakRpQjs7QUFvRHBCSyxNQUFNLENBQUNDLE9BQVAsR0FBaUJ0QixhQUFqQiJ9