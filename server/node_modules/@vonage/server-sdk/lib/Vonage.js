"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _Credentials = _interopRequireDefault(require("./Credentials"));

var _JwtGenerator = _interopRequireDefault(require("./JwtGenerator"));

var _HashGenerator = _interopRequireDefault(require("./HashGenerator"));

var _Message = _interopRequireDefault(require("./Message"));

var _Messages = _interopRequireDefault(require("./Messages"));

var _Voice = _interopRequireDefault(require("./Voice"));

var _Number = _interopRequireDefault(require("./Number"));

var _Verify = _interopRequireDefault(require("./Verify"));

var _NumberInsight = _interopRequireDefault(require("./NumberInsight"));

var _App = _interopRequireDefault(require("./App"));

var _Account = _interopRequireDefault(require("./Account"));

var _CallsResource = _interopRequireDefault(require("./CallsResource"));

var _FilesResource = _interopRequireDefault(require("./FilesResource"));

var _Conversion = _interopRequireDefault(require("./Conversion"));

var _Media = _interopRequireDefault(require("./Media"));

var _Redact = _interopRequireDefault(require("./Redact"));

var _Pricing = _interopRequireDefault(require("./Pricing"));

var _HttpClient = _interopRequireDefault(require("./HttpClient"));

var _NullLogger = _interopRequireDefault(require("./NullLogger"));

var _ConsoleLogger = _interopRequireDefault(require("./ConsoleLogger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var jwtGeneratorInstance = new _JwtGenerator.default();
var hashGeneratorInstance = new _HashGenerator.default();

class Vonage {
  /**
   * @param {Credentials} credentials - Vonage API credentials
   * @param {string} credentials.apiKey - the Vonage API key
   * @param {string} credentials.apiSecret - the Vonage API secret
   * @param {Object} options - Additional options
   * @param {boolean} options.debug - `true` to turn on debug logging
   * @param {Object} options.logger - Set a custom logger.
   * @param {string} options.appendToUserAgent - A value to append to the user agent.
   *                    The value will be prefixed with a `/`
   */
  constructor(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      debug: false
    };
    this.credentials = _Credentials.default.parse(credentials);
    this.options = Object.assign({}, options); // If no logger has been supplied but debug has been set
    // default to using the ConsoleLogger

    if (!this.options.logger && this.options.debug) {
      this.options.logger = new _ConsoleLogger.default();
    } else if (!this.options.logger) {
      // Swallow the logging
      this.options.logger = new _NullLogger.default();
    }

    var userAgent = "@vonage/server-sdk/UNKNOWN node/UNKNOWN";

    try {
      var packageDetails = require(_path.default.join(__dirname, "..", "package.json"));

      userAgent = "@vonage/server-sdk/".concat(packageDetails.version, " node/").concat(process.version.replace("v", ""));
    } catch (e) {
      console.warn("Could not load package details");
    }

    this.options.userAgent = userAgent;

    if (this.options.appendToUserAgent) {
      this.options.userAgent += " ".concat(this.options.appendToUserAgent);
    } // This is legacy, everything should use rest or api going forward


    this.options.httpClient = new _HttpClient.default(Object.assign({
      host: this.options.restHost || "rest.nexmo.com"
    }, this.options), this.credentials); // We have two different hosts, so we use two different HttpClients

    this.options.api = new _HttpClient.default(Object.assign({
      host: this.options.apiHost || "api.nexmo.com"
    }, this.options), this.credentials);
    this.options.rest = new _HttpClient.default(Object.assign({
      host: this.options.restHost || "rest.nexmo.com"
    }, this.options), this.credentials);
    this.message = new _Message.default(this.credentials, this.options);
    this.messages = new _Messages.default(this.credentials, this.options);
    this.voice = new _Voice.default(this.credentials, this.options);
    this.number = new _Number.default(this.credentials, this.options);
    this.verify = new _Verify.default(this.credentials, this.options);
    this.numberInsight = new _NumberInsight.default(this.credentials, this.options);
    this.applications = new _App.default(this.credentials, this.options);
    this.account = new _Account.default(this.credentials, this.options);
    this.calls = new _CallsResource.default(this.credentials, this.options);
    this.files = new _FilesResource.default(this.credentials, this.options);
    this.conversion = new _Conversion.default(this.credentials, this.options);
    this.media = new _Media.default(this.credentials, this.options);
    this.redact = new _Redact.default(this.credentials, this.options);
    this.pricing = new _Pricing.default(this.credentials, this.options);
    /**
     * @deprecated Please use vonage.applications
     */

    this.app = this.applications;
  }
  /**
   * Generate a JSON Web Token (JWT).
   *
   * The private key used upon Vonage instance construction will be used to sign
   * the JWT. The application_id you used upon Vonage instance creation will be
   * included in the claims for the JWT, however this can be overridden by passing
   * an application_id as part of the claims.
   *
   * @param {Object} claims - name/value pair claims to sign within the JWT
   *
   * @returns {String} the generated token
   */


  generateJwt() {
    var claims = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (claims.application_id === undefined) {
      claims.application_id = this.credentials.applicationId;
    }

    return Vonage.generateJwt(this.credentials.privateKey, claims);
  }
  /**
   * Generate a Signature Hash.
   *
   * @param {Object} params - params to generate hash from
   *
   * @returns {String} the generated token
   */


  generateSignature(params) {
    return this.credentials.generateSignature(params);
  }

}
/**
 * Generate a JSON Web Token (JWT).
 *
 * @param {String|Buffer} privateKey - the path to the private key certificate
 *          to be used when signing the claims.
 * @param {Object} claims - name/value pair claims to sign within the JWT
 *
 * @returns {String} the generated token
 */


Vonage.generateJwt = (privateKey, claims) => {
  if (!(privateKey instanceof Buffer)) {
    if (!_fs.default.existsSync(privateKey)) {
      throw new Error("File \"".concat(privateKey, "\" not found."));
    } else {
      privateKey = _fs.default.readFileSync(privateKey);
    }
  }

  return jwtGeneratorInstance.generate(privateKey, claims);
};
/**
 * Generate a Signature Hash.
 *
 * @param {String} method - the method to be used when creating the hash
 * @param {String} secret - the secret to be used when creating the hash
 * @param {Object} params - params to generate hash from
 *
 * @returns {String} the generated token
 */


Vonage.generateSignature = (method, secret, params) => {
  return hashGeneratorInstance.generate(method, secret, params);
};

var _default = Vonage;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,