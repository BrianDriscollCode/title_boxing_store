"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

class Account {
  /**
   * @param {Credentials} credentials
   *    credentials to be used when interacting with the API.
   * @param {Object} options
   *    Addition Account options.
   */
  constructor(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.creds = credentials;
    this.options = options;
  }
  /**
   * TODO: document
   */


  checkBalance(callback) {
    return this.options.rest.get("/account/get-balance", callback);
  }

  updatePassword(newSecret, callback) {
    return this.options.rest.postUseQueryString("/account/settings", {
      newSecret
    }, callback);
  }

  updateSMSCallback(moCallBackUrl, callback) {
    return this.options.rest.postUseQueryString("/account/settings", {
      moCallBackUrl
    }, callback);
  }

  updateDeliveryReceiptCallback(drCallBackUrl, callback) {
    return this.options.rest.postUseQueryString("/account/settings", {
      drCallBackUrl
    }, callback);
  }

  topUp(trx, callback) {
    return this.options.rest.postUseQueryString("/account/top-up", {
      trx
    }, callback);
  }

  listSecrets(apiKey, callback) {
    return this.options.api.get("/accounts/" + apiKey + "/secrets", {}, callback, false, true);
  }

  getSecret(apiKey, id, callback) {
    return this.options.api.get("/accounts/" + apiKey + "/secrets/" + id, {}, callback, false, true);
  }

  createSecret(apiKey, secret, callback) {
    return this.options.api.postJson("/accounts/" + apiKey + "/secrets/", {
      secret: secret
    }, callback, false, true);
  }

  deleteSecret(apiKey, id, callback) {
    return this.options.api.delete("/accounts/" + apiKey + "/secrets/" + id, callback, false, true);
  }

}

var _default = Account;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBY2NvdW50IiwiY29uc3RydWN0b3IiLCJjcmVkZW50aWFscyIsIm9wdGlvbnMiLCJjcmVkcyIsImNoZWNrQmFsYW5jZSIsImNhbGxiYWNrIiwicmVzdCIsImdldCIsInVwZGF0ZVBhc3N3b3JkIiwibmV3U2VjcmV0IiwicG9zdFVzZVF1ZXJ5U3RyaW5nIiwidXBkYXRlU01TQ2FsbGJhY2siLCJtb0NhbGxCYWNrVXJsIiwidXBkYXRlRGVsaXZlcnlSZWNlaXB0Q2FsbGJhY2siLCJkckNhbGxCYWNrVXJsIiwidG9wVXAiLCJ0cngiLCJsaXN0U2VjcmV0cyIsImFwaUtleSIsImFwaSIsImdldFNlY3JldCIsImlkIiwiY3JlYXRlU2VjcmV0Iiwic2VjcmV0IiwicG9zdEpzb24iLCJkZWxldGVTZWNyZXQiLCJkZWxldGUiXSwic291cmNlcyI6WyIuLi9zcmMvQWNjb3VudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY2xhc3MgQWNjb3VudCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0NyZWRlbnRpYWxzfSBjcmVkZW50aWFsc1xuICAgKiAgICBjcmVkZW50aWFscyB0byBiZSB1c2VkIHdoZW4gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgQVBJLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiAgICBBZGRpdGlvbiBBY2NvdW50IG9wdGlvbnMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjcmVkZW50aWFscywgb3B0aW9ucyA9IHt9KSB7XG4gICAgdGhpcy5jcmVkcyA9IGNyZWRlbnRpYWxzO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogVE9ETzogZG9jdW1lbnRcbiAgICovXG4gIGNoZWNrQmFsYW5jZShjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMucmVzdC5nZXQoXCIvYWNjb3VudC9nZXQtYmFsYW5jZVwiLCBjYWxsYmFjayk7XG4gIH1cblxuICB1cGRhdGVQYXNzd29yZChuZXdTZWNyZXQsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5yZXN0LnBvc3RVc2VRdWVyeVN0cmluZyhcbiAgICAgIFwiL2FjY291bnQvc2V0dGluZ3NcIixcbiAgICAgIHsgbmV3U2VjcmV0IH0sXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gIH1cblxuICB1cGRhdGVTTVNDYWxsYmFjayhtb0NhbGxCYWNrVXJsLCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMucmVzdC5wb3N0VXNlUXVlcnlTdHJpbmcoXG4gICAgICBcIi9hY2NvdW50L3NldHRpbmdzXCIsXG4gICAgICB7IG1vQ2FsbEJhY2tVcmwgfSxcbiAgICAgIGNhbGxiYWNrXG4gICAgKTtcbiAgfVxuXG4gIHVwZGF0ZURlbGl2ZXJ5UmVjZWlwdENhbGxiYWNrKGRyQ2FsbEJhY2tVcmwsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5yZXN0LnBvc3RVc2VRdWVyeVN0cmluZyhcbiAgICAgIFwiL2FjY291bnQvc2V0dGluZ3NcIixcbiAgICAgIHsgZHJDYWxsQmFja1VybCB9LFxuICAgICAgY2FsbGJhY2tcbiAgICApO1xuICB9XG5cbiAgdG9wVXAodHJ4LCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMucmVzdC5wb3N0VXNlUXVlcnlTdHJpbmcoXG4gICAgICBcIi9hY2NvdW50L3RvcC11cFwiLFxuICAgICAgeyB0cnggfSxcbiAgICAgIGNhbGxiYWNrXG4gICAgKTtcbiAgfVxuXG4gIGxpc3RTZWNyZXRzKGFwaUtleSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmFwaS5nZXQoXG4gICAgICBcIi9hY2NvdW50cy9cIiArIGFwaUtleSArIFwiL3NlY3JldHNcIixcbiAgICAgIHt9LFxuICAgICAgY2FsbGJhY2ssXG4gICAgICBmYWxzZSxcbiAgICAgIHRydWVcbiAgICApO1xuICB9XG5cbiAgZ2V0U2VjcmV0KGFwaUtleSwgaWQsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5hcGkuZ2V0KFxuICAgICAgXCIvYWNjb3VudHMvXCIgKyBhcGlLZXkgKyBcIi9zZWNyZXRzL1wiICsgaWQsXG4gICAgICB7fSxcbiAgICAgIGNhbGxiYWNrLFxuICAgICAgZmFsc2UsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgfVxuXG4gIGNyZWF0ZVNlY3JldChhcGlLZXksIHNlY3JldCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmFwaS5wb3N0SnNvbihcbiAgICAgIFwiL2FjY291bnRzL1wiICsgYXBpS2V5ICsgXCIvc2VjcmV0cy9cIixcbiAgICAgIHsgc2VjcmV0OiBzZWNyZXQgfSxcbiAgICAgIGNhbGxiYWNrLFxuICAgICAgZmFsc2UsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgfVxuXG4gIGRlbGV0ZVNlY3JldChhcGlLZXksIGlkLCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuYXBpLmRlbGV0ZShcbiAgICAgIFwiL2FjY291bnRzL1wiICsgYXBpS2V5ICsgXCIvc2VjcmV0cy9cIiArIGlkLFxuICAgICAgY2FsbGJhY2ssXG4gICAgICBmYWxzZSxcbiAgICAgIHRydWVcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFjY291bnQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBRUEsTUFBTUEsT0FBTixDQUFjO0VBQ1o7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLFdBQVcsQ0FBQ0MsV0FBRCxFQUE0QjtJQUFBLElBQWRDLE9BQWMsdUVBQUosRUFBSTtJQUNyQyxLQUFLQyxLQUFMLEdBQWFGLFdBQWI7SUFDQSxLQUFLQyxPQUFMLEdBQWVBLE9BQWY7RUFDRDtFQUVEO0FBQ0Y7QUFDQTs7O0VBQ0VFLFlBQVksQ0FBQ0MsUUFBRCxFQUFXO0lBQ3JCLE9BQU8sS0FBS0gsT0FBTCxDQUFhSSxJQUFiLENBQWtCQyxHQUFsQixDQUFzQixzQkFBdEIsRUFBOENGLFFBQTlDLENBQVA7RUFDRDs7RUFFREcsY0FBYyxDQUFDQyxTQUFELEVBQVlKLFFBQVosRUFBc0I7SUFDbEMsT0FBTyxLQUFLSCxPQUFMLENBQWFJLElBQWIsQ0FBa0JJLGtCQUFsQixDQUNMLG1CQURLLEVBRUw7TUFBRUQ7SUFBRixDQUZLLEVBR0xKLFFBSEssQ0FBUDtFQUtEOztFQUVETSxpQkFBaUIsQ0FBQ0MsYUFBRCxFQUFnQlAsUUFBaEIsRUFBMEI7SUFDekMsT0FBTyxLQUFLSCxPQUFMLENBQWFJLElBQWIsQ0FBa0JJLGtCQUFsQixDQUNMLG1CQURLLEVBRUw7TUFBRUU7SUFBRixDQUZLLEVBR0xQLFFBSEssQ0FBUDtFQUtEOztFQUVEUSw2QkFBNkIsQ0FBQ0MsYUFBRCxFQUFnQlQsUUFBaEIsRUFBMEI7SUFDckQsT0FBTyxLQUFLSCxPQUFMLENBQWFJLElBQWIsQ0FBa0JJLGtCQUFsQixDQUNMLG1CQURLLEVBRUw7TUFBRUk7SUFBRixDQUZLLEVBR0xULFFBSEssQ0FBUDtFQUtEOztFQUVEVSxLQUFLLENBQUNDLEdBQUQsRUFBTVgsUUFBTixFQUFnQjtJQUNuQixPQUFPLEtBQUtILE9BQUwsQ0FBYUksSUFBYixDQUFrQkksa0JBQWxCLENBQ0wsaUJBREssRUFFTDtNQUFFTTtJQUFGLENBRkssRUFHTFgsUUFISyxDQUFQO0VBS0Q7O0VBRURZLFdBQVcsQ0FBQ0MsTUFBRCxFQUFTYixRQUFULEVBQW1CO0lBQzVCLE9BQU8sS0FBS0gsT0FBTCxDQUFhaUIsR0FBYixDQUFpQlosR0FBakIsQ0FDTCxlQUFlVyxNQUFmLEdBQXdCLFVBRG5CLEVBRUwsRUFGSyxFQUdMYixRQUhLLEVBSUwsS0FKSyxFQUtMLElBTEssQ0FBUDtFQU9EOztFQUVEZSxTQUFTLENBQUNGLE1BQUQsRUFBU0csRUFBVCxFQUFhaEIsUUFBYixFQUF1QjtJQUM5QixPQUFPLEtBQUtILE9BQUwsQ0FBYWlCLEdBQWIsQ0FBaUJaLEdBQWpCLENBQ0wsZUFBZVcsTUFBZixHQUF3QixXQUF4QixHQUFzQ0csRUFEakMsRUFFTCxFQUZLLEVBR0xoQixRQUhLLEVBSUwsS0FKSyxFQUtMLElBTEssQ0FBUDtFQU9EOztFQUVEaUIsWUFBWSxDQUFDSixNQUFELEVBQVNLLE1BQVQsRUFBaUJsQixRQUFqQixFQUEyQjtJQUNyQyxPQUFPLEtBQUtILE9BQUwsQ0FBYWlCLEdBQWIsQ0FBaUJLLFFBQWpCLENBQ0wsZUFBZU4sTUFBZixHQUF3QixXQURuQixFQUVMO01BQUVLLE1BQU0sRUFBRUE7SUFBVixDQUZLLEVBR0xsQixRQUhLLEVBSUwsS0FKSyxFQUtMLElBTEssQ0FBUDtFQU9EOztFQUVEb0IsWUFBWSxDQUFDUCxNQUFELEVBQVNHLEVBQVQsRUFBYWhCLFFBQWIsRUFBdUI7SUFDakMsT0FBTyxLQUFLSCxPQUFMLENBQWFpQixHQUFiLENBQWlCTyxNQUFqQixDQUNMLGVBQWVSLE1BQWYsR0FBd0IsV0FBeEIsR0FBc0NHLEVBRGpDLEVBRUxoQixRQUZLLEVBR0wsS0FISyxFQUlMLElBSkssQ0FBUDtFQU1EOztBQXhGVzs7ZUEyRkNOLE8ifQ==