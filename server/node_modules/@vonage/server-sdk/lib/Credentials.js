"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _JwtGenerator = _interopRequireDefault(require("./JwtGenerator"));

var _HashGenerator = _interopRequireDefault(require("./HashGenerator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Right now only key/secret credentials are supported.
 * However, in time JWT will also be supported.
 * The `Credentials` object provides an abstraction to this.
 *
 * @param {string} apiKey - A Vonage API Key
 * @param {string} apiSecret - A Vonage API Secret
 * @param {string} [applicationId] - A VonageApplication ID
 * @param {string|Buffer} [privateKey] -  When a string value is passed it should
 *                        either represent the path to the private key, or the actual
 *                        private key in string format. If a Buffer is passed then
 *                        it should be the key read from the file system.
 * @param {string} [signatureSecret] - A Vonage signature Secret
 * @param {string} [signatureMethod] - A Vonage compatible request signing method
 */
class Credentials {
  constructor(apiKey, apiSecret, privateKey, applicationId, signatureSecret, signatureMethod) {
    this.apiKey = apiKey;
    this.apiSecret = apiSecret;
    this.privateKey = null;
    this.applicationId = applicationId;
    this.signatureSecret = signatureSecret;
    this.signatureMethod = signatureMethod;

    if (privateKey instanceof Buffer) {
      // it is already a buffer, use it as-is
      this.privateKey = privateKey;
    } else if (typeof privateKey === "string" && privateKey.startsWith("-----BEGIN PRIVATE KEY-----")) {
      // It's a key string. Check for \n, replace with newlines
      privateKey = privateKey.replace(/\\n/g, "\n");
      this.privateKey = Buffer.from(privateKey, "utf-8");
    } else if (privateKey !== undefined) {
      if (!_fs.default.existsSync(privateKey)) {
        throw new Error("File \"".concat(privateKey, "\" not found."));
      }

      this.privateKey = _fs.default.readFileSync(privateKey);
    }
    /** @private */


    this._jwtGenerator = new _JwtGenerator.default();
    this._hashGenerator = new _HashGenerator.default();
  }
  /**
   * Generate a Jwt using the Private Key in the Credentials.
   * By default the credentials.applicationId will be used when creating the token.
   * However, this can be overwritten.
   *
   * @param {string} [applicationId] an application ID to be used instead of the
   *                default Credentials.applicationId value.
   *
   * @returns {string} The generated JWT
   */


  generateJwt() {
    var applicationId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.applicationId;
    var privateKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.privateKey;
    var claims = {
      application_id: applicationId
    };

    var token = this._jwtGenerator.generate(privateKey, claims);

    return token;
  }

  generateSignature(params) {
    var signatureSecret = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.signatureSecret;
    var signatureMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.signatureMethod;
    return this._hashGenerator.generate(signatureMethod, signatureSecret, params);
  }
  /**
   * @private
   * Used for testing purposes only.
   */


  _setJwtGenerator(generator) {
    this._jwtGenerator = generator;
  }
  /**
   * @private
   * Used for testing purposes only.
   */


  _setHashGenerator(generator) {
    this._hashGenerator = generator;
  }
  /**
   * Ensures a credentials instance is used.
   *
   * Key/Secret credentials are only supported at present.
   */


  static parse(obj) {
    if (obj instanceof Credentials) {
      return obj;
    } else {
      return new Credentials(obj.apiKey, obj.apiSecret, obj.privateKey, obj.applicationId, obj.signatureSecret, obj.signatureMethod);
    }
  }

}

var _default = Credentials;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,