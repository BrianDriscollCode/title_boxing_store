"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Utils = _interopRequireDefault(require("./Utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Verify {
  static get PATH() {
    return "/verify{action}/json";
  }

  static get ERROR_MESSAGES() {
    return {
      verifyValidation: "Missing Mandatory fields (number and/or brand)",
      checkVerifyValidation: "Missing Mandatory fields (request_id and/or code)",
      controlVerifyValidation: "Missing Mandatory fields (request_id and/or cmd-command)",
      searchVerifyValidation: "Missing Mandatory fields (request_id or request_ids)"
    };
  }
  /**
   * @param {Credentials} credentials
   *    credentials to be used when interacting with the API.
   * @param {Object} options
   *    Addition Verify options.
   */


  constructor(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.creds = credentials;
    this.options = options;
  }
  /**
   * TODO: document
   */


  request(inputParams, callback) {
    if (!inputParams.number || !inputParams.brand) {
      _Utils.default.sendError(callback, new Error(Verify.ERROR_MESSAGES.verifyValidation));
    } else {
      inputParams["api_key"] = this.creds.apiKey;
      inputParams["api_secret"] = this.creds.apiSecret;
      this.options.httpClient.request({
        host: this.options.apiHost || "api.nexmo.com",
        path: _Utils.default.createPathWithQuery("".concat(Verify.PATH.replace("{action}", "")), inputParams)
      }, callback);
    }
  }
  /**
   * TODO: document
   */


  psd2(inputParams, callback) {
    inputParams["api_key"] = this.creds.apiKey;
    inputParams["api_secret"] = this.creds.apiSecret;
    this.options.httpClient.request({
      host: this.options.apiHost || "api.nexmo.com",
      path: _Utils.default.createPathWithQuery("".concat(Verify.PATH.replace("{action}", "/psd2")), inputParams)
    }, callback);
  }
  /**
   * TODO: document
   */


  check(inputParams, callback) {
    if (!inputParams.request_id || !inputParams.code) {
      _Utils.default.sendError(callback, new Error(Verify.ERROR_MESSAGES.checkVerifyValidation));
    } else {
      inputParams["api_key"] = this.creds.apiKey;
      inputParams["api_secret"] = this.creds.apiSecret;
      this.options.httpClient.request({
        host: this.options.apiHost || "api.nexmo.com",
        path: _Utils.default.createPathWithQuery("".concat(Verify.PATH.replace("{action}", "/check")), inputParams)
      }, callback);
    }
  }
  /**
   * TODO: document
   */


  control(inputParams, callback) {
    if (!inputParams.request_id || !inputParams.cmd) {
      _Utils.default.sendError(callback, new Error(Verify.ERROR_MESSAGES.controlVerifyValidation));
    } else {
      inputParams["api_key"] = this.creds.apiKey;
      inputParams["api_secret"] = this.creds.apiSecret;
      this.options.httpClient.request({
        host: this.options.apiHost || "api.nexmo.com",
        path: _Utils.default.createPathWithQuery("".concat(Verify.PATH.replace("{action}", "/control")), inputParams)
      }, callback);
    }
  }
  /**
   * TODO: document
   */


  search(requestIds, callback) {
    var requestIdParam = {};

    if (!requestIds) {
      _Utils.default.sendError(callback, new Error(Verify.ERROR_MESSAGES.searchVerifyValidation));
    } else {
      if (Array.isArray(requestIds)) {
        if (requestIds.length === 1) {
          requestIdParam.request_id = requestIds;
        } else {
          requestIdParam.request_ids = requestIds;
        }
      } else {
        requestIdParam.request_id = requestIds;
      }

      requestIdParam["api_key"] = this.creds.apiKey;
      requestIdParam["api_secret"] = this.creds.apiSecret;
      this.options.httpClient.request({
        host: this.options.apiHost || "api.nexmo.com",
        path: _Utils.default.createPathWithQuery("".concat(Verify.PATH.replace("{action}", "/search")), requestIdParam)
      }, callback);
    }
  }

}

var _default = Verify;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZXJpZnkiLCJQQVRIIiwiRVJST1JfTUVTU0FHRVMiLCJ2ZXJpZnlWYWxpZGF0aW9uIiwiY2hlY2tWZXJpZnlWYWxpZGF0aW9uIiwiY29udHJvbFZlcmlmeVZhbGlkYXRpb24iLCJzZWFyY2hWZXJpZnlWYWxpZGF0aW9uIiwiY29uc3RydWN0b3IiLCJjcmVkZW50aWFscyIsIm9wdGlvbnMiLCJjcmVkcyIsInJlcXVlc3QiLCJpbnB1dFBhcmFtcyIsImNhbGxiYWNrIiwibnVtYmVyIiwiYnJhbmQiLCJVdGlscyIsInNlbmRFcnJvciIsIkVycm9yIiwiYXBpS2V5IiwiYXBpU2VjcmV0IiwiaHR0cENsaWVudCIsImhvc3QiLCJhcGlIb3N0IiwicGF0aCIsImNyZWF0ZVBhdGhXaXRoUXVlcnkiLCJyZXBsYWNlIiwicHNkMiIsImNoZWNrIiwicmVxdWVzdF9pZCIsImNvZGUiLCJjb250cm9sIiwiY21kIiwic2VhcmNoIiwicmVxdWVzdElkcyIsInJlcXVlc3RJZFBhcmFtIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwicmVxdWVzdF9pZHMiXSwic291cmNlcyI6WyIuLi9zcmMvVmVyaWZ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4vVXRpbHNcIjtcblxuY2xhc3MgVmVyaWZ5IHtcbiAgc3RhdGljIGdldCBQQVRIKCkge1xuICAgIHJldHVybiBcIi92ZXJpZnl7YWN0aW9ufS9qc29uXCI7XG4gIH1cblxuICBzdGF0aWMgZ2V0IEVSUk9SX01FU1NBR0VTKCkge1xuICAgIHJldHVybiB7XG4gICAgICB2ZXJpZnlWYWxpZGF0aW9uOiBcIk1pc3NpbmcgTWFuZGF0b3J5IGZpZWxkcyAobnVtYmVyIGFuZC9vciBicmFuZClcIixcbiAgICAgIGNoZWNrVmVyaWZ5VmFsaWRhdGlvbjpcbiAgICAgICAgXCJNaXNzaW5nIE1hbmRhdG9yeSBmaWVsZHMgKHJlcXVlc3RfaWQgYW5kL29yIGNvZGUpXCIsXG4gICAgICBjb250cm9sVmVyaWZ5VmFsaWRhdGlvbjpcbiAgICAgICAgXCJNaXNzaW5nIE1hbmRhdG9yeSBmaWVsZHMgKHJlcXVlc3RfaWQgYW5kL29yIGNtZC1jb21tYW5kKVwiLFxuICAgICAgc2VhcmNoVmVyaWZ5VmFsaWRhdGlvbjpcbiAgICAgICAgXCJNaXNzaW5nIE1hbmRhdG9yeSBmaWVsZHMgKHJlcXVlc3RfaWQgb3IgcmVxdWVzdF9pZHMpXCIsXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtDcmVkZW50aWFsc30gY3JlZGVudGlhbHNcbiAgICogICAgY3JlZGVudGlhbHMgdG8gYmUgdXNlZCB3aGVuIGludGVyYWN0aW5nIHdpdGggdGhlIEFQSS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogICAgQWRkaXRpb24gVmVyaWZ5IG9wdGlvbnMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjcmVkZW50aWFscywgb3B0aW9ucyA9IHt9KSB7XG4gICAgdGhpcy5jcmVkcyA9IGNyZWRlbnRpYWxzO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogVE9ETzogZG9jdW1lbnRcbiAgICovXG4gIHJlcXVlc3QoaW5wdXRQYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFpbnB1dFBhcmFtcy5udW1iZXIgfHwgIWlucHV0UGFyYW1zLmJyYW5kKSB7XG4gICAgICBVdGlscy5zZW5kRXJyb3IoXG4gICAgICAgIGNhbGxiYWNrLFxuICAgICAgICBuZXcgRXJyb3IoVmVyaWZ5LkVSUk9SX01FU1NBR0VTLnZlcmlmeVZhbGlkYXRpb24pXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dFBhcmFtc1tcImFwaV9rZXlcIl0gPSB0aGlzLmNyZWRzLmFwaUtleTtcbiAgICAgIGlucHV0UGFyYW1zW1wiYXBpX3NlY3JldFwiXSA9IHRoaXMuY3JlZHMuYXBpU2VjcmV0O1xuICAgICAgdGhpcy5vcHRpb25zLmh0dHBDbGllbnQucmVxdWVzdChcbiAgICAgICAge1xuICAgICAgICAgIGhvc3Q6IHRoaXMub3B0aW9ucy5hcGlIb3N0IHx8IFwiYXBpLm5leG1vLmNvbVwiLFxuICAgICAgICAgIHBhdGg6IFV0aWxzLmNyZWF0ZVBhdGhXaXRoUXVlcnkoXG4gICAgICAgICAgICBgJHtWZXJpZnkuUEFUSC5yZXBsYWNlKFwie2FjdGlvbn1cIiwgXCJcIil9YCxcbiAgICAgICAgICAgIGlucHV0UGFyYW1zXG4gICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsbGJhY2tcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRPRE86IGRvY3VtZW50XG4gICAqL1xuICBwc2QyKGlucHV0UGFyYW1zLCBjYWxsYmFjaykge1xuICAgIGlucHV0UGFyYW1zW1wiYXBpX2tleVwiXSA9IHRoaXMuY3JlZHMuYXBpS2V5O1xuICAgIGlucHV0UGFyYW1zW1wiYXBpX3NlY3JldFwiXSA9IHRoaXMuY3JlZHMuYXBpU2VjcmV0O1xuICAgIHRoaXMub3B0aW9ucy5odHRwQ2xpZW50LnJlcXVlc3QoXG4gICAgICB7XG4gICAgICAgIGhvc3Q6IHRoaXMub3B0aW9ucy5hcGlIb3N0IHx8IFwiYXBpLm5leG1vLmNvbVwiLFxuICAgICAgICBwYXRoOiBVdGlscy5jcmVhdGVQYXRoV2l0aFF1ZXJ5KFxuICAgICAgICAgIGAke1ZlcmlmeS5QQVRILnJlcGxhY2UoXCJ7YWN0aW9ufVwiLCBcIi9wc2QyXCIpfWAsXG4gICAgICAgICAgaW5wdXRQYXJhbXNcbiAgICAgICAgKSxcbiAgICAgIH0sXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVE9ETzogZG9jdW1lbnRcbiAgICovXG4gIGNoZWNrKGlucHV0UGFyYW1zLCBjYWxsYmFjaykge1xuICAgIGlmICghaW5wdXRQYXJhbXMucmVxdWVzdF9pZCB8fCAhaW5wdXRQYXJhbXMuY29kZSkge1xuICAgICAgVXRpbHMuc2VuZEVycm9yKFxuICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgbmV3IEVycm9yKFZlcmlmeS5FUlJPUl9NRVNTQUdFUy5jaGVja1ZlcmlmeVZhbGlkYXRpb24pXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dFBhcmFtc1tcImFwaV9rZXlcIl0gPSB0aGlzLmNyZWRzLmFwaUtleTtcbiAgICAgIGlucHV0UGFyYW1zW1wiYXBpX3NlY3JldFwiXSA9IHRoaXMuY3JlZHMuYXBpU2VjcmV0O1xuICAgICAgdGhpcy5vcHRpb25zLmh0dHBDbGllbnQucmVxdWVzdChcbiAgICAgICAge1xuICAgICAgICAgIGhvc3Q6IHRoaXMub3B0aW9ucy5hcGlIb3N0IHx8IFwiYXBpLm5leG1vLmNvbVwiLFxuICAgICAgICAgIHBhdGg6IFV0aWxzLmNyZWF0ZVBhdGhXaXRoUXVlcnkoXG4gICAgICAgICAgICBgJHtWZXJpZnkuUEFUSC5yZXBsYWNlKFwie2FjdGlvbn1cIiwgXCIvY2hlY2tcIil9YCxcbiAgICAgICAgICAgIGlucHV0UGFyYW1zXG4gICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsbGJhY2tcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRPRE86IGRvY3VtZW50XG4gICAqL1xuICBjb250cm9sKGlucHV0UGFyYW1zLCBjYWxsYmFjaykge1xuICAgIGlmICghaW5wdXRQYXJhbXMucmVxdWVzdF9pZCB8fCAhaW5wdXRQYXJhbXMuY21kKSB7XG4gICAgICBVdGlscy5zZW5kRXJyb3IoXG4gICAgICAgIGNhbGxiYWNrLFxuICAgICAgICBuZXcgRXJyb3IoVmVyaWZ5LkVSUk9SX01FU1NBR0VTLmNvbnRyb2xWZXJpZnlWYWxpZGF0aW9uKVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXRQYXJhbXNbXCJhcGlfa2V5XCJdID0gdGhpcy5jcmVkcy5hcGlLZXk7XG4gICAgICBpbnB1dFBhcmFtc1tcImFwaV9zZWNyZXRcIl0gPSB0aGlzLmNyZWRzLmFwaVNlY3JldDtcbiAgICAgIHRoaXMub3B0aW9ucy5odHRwQ2xpZW50LnJlcXVlc3QoXG4gICAgICAgIHtcbiAgICAgICAgICBob3N0OiB0aGlzLm9wdGlvbnMuYXBpSG9zdCB8fCBcImFwaS5uZXhtby5jb21cIixcbiAgICAgICAgICBwYXRoOiBVdGlscy5jcmVhdGVQYXRoV2l0aFF1ZXJ5KFxuICAgICAgICAgICAgYCR7VmVyaWZ5LlBBVEgucmVwbGFjZShcInthY3Rpb259XCIsIFwiL2NvbnRyb2xcIil9YCxcbiAgICAgICAgICAgIGlucHV0UGFyYW1zXG4gICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsbGJhY2tcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRPRE86IGRvY3VtZW50XG4gICAqL1xuICBzZWFyY2gocmVxdWVzdElkcywgY2FsbGJhY2spIHtcbiAgICB2YXIgcmVxdWVzdElkUGFyYW0gPSB7fTtcbiAgICBpZiAoIXJlcXVlc3RJZHMpIHtcbiAgICAgIFV0aWxzLnNlbmRFcnJvcihcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIG5ldyBFcnJvcihWZXJpZnkuRVJST1JfTUVTU0FHRVMuc2VhcmNoVmVyaWZ5VmFsaWRhdGlvbilcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlcXVlc3RJZHMpKSB7XG4gICAgICAgIGlmIChyZXF1ZXN0SWRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIHJlcXVlc3RJZFBhcmFtLnJlcXVlc3RfaWQgPSByZXF1ZXN0SWRzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcXVlc3RJZFBhcmFtLnJlcXVlc3RfaWRzID0gcmVxdWVzdElkcztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVxdWVzdElkUGFyYW0ucmVxdWVzdF9pZCA9IHJlcXVlc3RJZHM7XG4gICAgICB9XG4gICAgICByZXF1ZXN0SWRQYXJhbVtcImFwaV9rZXlcIl0gPSB0aGlzLmNyZWRzLmFwaUtleTtcbiAgICAgIHJlcXVlc3RJZFBhcmFtW1wiYXBpX3NlY3JldFwiXSA9IHRoaXMuY3JlZHMuYXBpU2VjcmV0O1xuICAgICAgdGhpcy5vcHRpb25zLmh0dHBDbGllbnQucmVxdWVzdChcbiAgICAgICAge1xuICAgICAgICAgIGhvc3Q6IHRoaXMub3B0aW9ucy5hcGlIb3N0IHx8IFwiYXBpLm5leG1vLmNvbVwiLFxuICAgICAgICAgIHBhdGg6IFV0aWxzLmNyZWF0ZVBhdGhXaXRoUXVlcnkoXG4gICAgICAgICAgICBgJHtWZXJpZnkuUEFUSC5yZXBsYWNlKFwie2FjdGlvbn1cIiwgXCIvc2VhcmNoXCIpfWAsXG4gICAgICAgICAgICByZXF1ZXN0SWRQYXJhbVxuICAgICAgICAgICksXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGxiYWNrXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBWZXJpZnk7XG4iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBRUE7Ozs7QUFFQSxNQUFNQSxNQUFOLENBQWE7RUFDSSxXQUFKQyxJQUFJLEdBQUc7SUFDaEIsT0FBTyxzQkFBUDtFQUNEOztFQUV3QixXQUFkQyxjQUFjLEdBQUc7SUFDMUIsT0FBTztNQUNMQyxnQkFBZ0IsRUFBRSxnREFEYjtNQUVMQyxxQkFBcUIsRUFDbkIsbURBSEc7TUFJTEMsdUJBQXVCLEVBQ3JCLDBEQUxHO01BTUxDLHNCQUFzQixFQUNwQjtJQVBHLENBQVA7RUFTRDtFQUNEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0VBQ0VDLFdBQVcsQ0FBQ0MsV0FBRCxFQUE0QjtJQUFBLElBQWRDLE9BQWMsdUVBQUosRUFBSTtJQUNyQyxLQUFLQyxLQUFMLEdBQWFGLFdBQWI7SUFDQSxLQUFLQyxPQUFMLEdBQWVBLE9BQWY7RUFDRDtFQUVEO0FBQ0Y7QUFDQTs7O0VBQ0VFLE9BQU8sQ0FBQ0MsV0FBRCxFQUFjQyxRQUFkLEVBQXdCO0lBQzdCLElBQUksQ0FBQ0QsV0FBVyxDQUFDRSxNQUFiLElBQXVCLENBQUNGLFdB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