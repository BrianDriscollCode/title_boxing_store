"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _index = _interopRequireDefault(require("./index"));

var _Utils = _interopRequireDefault(require("./Utils"));

var _Members = _interopRequireDefault(require("./Members"));

var _Events = _interopRequireDefault(require("./Events"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Provides access to the `conversations` endpoint.
 */
class Conversations {
  static get PATH() {
    return "/beta/conversations";
  }

  static get BETA2_PATH() {
    return "/beta2/conversations";
  }

  static get V1_PATH() {
    return "/v1/conversations";
  }
  /**
   * @param {Credentials} credentials
   *    credentials to be used when interacting with the API.
   * @param {Object} options
   *    Additional Conversations options.
   */


  constructor(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.creds = credentials;
    this.options = options;
    /**
     * @type Members
     */

    this.members = new _Members.default(this.creds, this.options);
    /**
     * @type Events
     */

    this.events = new _Events.default(this.creds, this.options);
  }
  /**
   * Create a new conversation.
   *
   * @param {Object} params - Parameters used when creating the conversation. See https://ea.developer.nexmo.com/api/conversation#create-a-conversation for more information.
   * @param {function} callback - function to be called when the request completes.
   */


  create(params, callback) {
    params = JSON.stringify(params);
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: Conversations.PATH,
      method: "POST",
      body: params,
      headers: {
        "Content-Type": "application/json",
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }
  /**
   * Get an existing conversation.
   *
   * @param {string|object} query - The unique identifier for the conversation to retrieve
   *               or a set of filter parameters for the query. For more information
   *               see https://ea.developer.nexmo.com/api/conversation#retrieve-a-conversation
   * @param {function} callback - function to be called when the request completes.
   */


  get(query, callback) {
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: typeof query === "string" ? "".concat(Conversations.PATH, "/").concat(query) : _Utils.default.createPathWithQuery(Conversations.BETA2_PATH, query),
      method: "GET",
      body: undefined,
      headers: {
        "Content-Type": "application/json",
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }
  /**
   * Get next page of conversations.
   *
   * @param {object} response - The response from a paginated conversations list
   *               see https://ea.developer.nexmo.com/api/conversation#listConversations
   * @param {function} callback - function to be called when the request completes.
   */


  next(response, callback) {
    if (response._links.next) {
      this.get(_Utils.default.getQuery(response._links.next.href), callback);
    } else {
      var error = new Error("The response doesn't have a next page.");
      callback(error, null);
    }
  }
  /**
   * Get previous page of conversations.
   *
   * @param {object} response - The response from a paginated conversations list
   *               see https://ea.developer.nexmo.com/api/conversation#listConversations
   * @param {function} callback - function to be called when the request completes.
   */


  prev(response, callback) {
    if (response._links.prev) {
      this.get(_Utils.default.getQuery(response._links.prev.href), callback);
    } else {
      var error = new Error("The response doesn't have a previous page.");
      callback(error, null);
    }
  }
  /**
   * Update an existing conversation.
   *
   * @param {string} conversationId - The unique identifier for the conversation to update.
   * @param {Object} params - Parameters used when updating the conversation.
   * @param {function} callback - function to be called when the request completes.
   */


  update(conversationId, params, callback) {
    params = JSON.stringify(params);
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: "".concat(Conversations.PATH, "/").concat(conversationId),
      method: "PUT",
      body: params,
      headers: {
        "Content-Type": "application/json",
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }
  /**
   * Record an existing conversation.
   *
   * @param {string} conversationId - The unique identifier for the conversation to record.
   * @param {Object} params - Parameters used when recording the conversation.
   * @param {function} callback - function to be called when the request completes.
   */


  record(conversationId, params, callback) {
    params = JSON.stringify(params);
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: "".concat(Conversations.V1_PATH, "/").concat(conversationId, "/record"),
      method: "PUT",
      body: params,
      headers: {
        "Content-Type": "application/json",
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }
  /**
   * Deleta an existing conversation.
   *
   * @param {string} conversationId - The unique identifier for the conversation to delete.
   * @param {function} callback - function to be called when the request completes.
   */


  delete(conversationId, callback) {
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: "".concat(Conversations.PATH, "/").concat(conversationId),
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }

}

var _default = Conversations;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,